def go_module(name:str, install:list, modfile:str = "go.mod"):
    modcache = build_rule(
        name = name,
        tag = "modcache",
        srcs = [modfile, modfile.replace(".mod", ".sum")],
        outs = ["go/pkg/mod"],
        cmd = ' && '.join([
            "mkdir -p tmp",
            "export TMPDIR=$TMP_DIR/tmp",
            f"$TOOLS mod download -x 2>&1",
            "chmod -R 0755 go", # this is required because go makes the cache dir non-writable
        ]),
        tools = [CONFIG.GO_TOOL],
    )

    packages = []
    for package in install:
        package_dir = dirname(package)
        output_dir = f"pkg/{CONFIG.GOOS}_{CONFIG.GOARCH}/{package_dir}"
        output = f"pkg/{CONFIG.GOOS}_{CONFIG.GOARCH}/{package}.a"

        packages += [
            build_rule(
                name = package_to_label(name, package),
                srcs = [modcache],
                outs = [output],
                cmd = ' && '.join([
                    "mkdir -p tmp",
                    "export TMPDIR=$TMP_DIR/tmp",
                    f"mkdir -p {output_dir}",
                    f"$TOOLS build -trimpath -mod=readonly -v -o {output} {package}",
                ]),
                tools = [CONFIG.GO_TOOL],
                visibility = ["PUBLIC"],
            )
        ]

    return filegroup(name = name, srcs = packages)

def go_mod_dep(mod:str, package:str):
    pkg, name = decompose(mod)
    label = package_to_label(name, package)

    return f"//{pkg}:{label}"

def package_to_label(name: str, package: str) -> str:
    package = package.replace("/", "_")
    return f"_{name}#install_{package}"
